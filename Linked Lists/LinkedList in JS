class Node{
    constructor(value){
        this.value = value;
        this.next = null;
    }
}

class LinkedList{
    constructor(value){
        const new_node = new Node(value)
        this.head = new_node
        this.tail = this.head
        this.length = 1
    }
    
    push(value){
        if(!this.head){
            const new_node = new Node(value)
            this.head = new_node
            this.tail = this.head
        }
        else{
            const new_node = new Node(value)
            this.tail.next = new_node
            this.tail = new_node
        }
        this.length++
        return this
    }
    
    pop(){
        if(!this.head){
            return undefined
        }
        if(this.head.next == null)
        {
            this.head = null
            this.tail = null
            this.length--
            return this.head
        }
        let pre = this.head
        let temp = this.head
        
        while(temp.next){
            pre = temp
            temp = temp.next
        }
        this.tail = pre
        this.tail.next = null
        this.length--
        return temp
    }
    
    unshift(value){
        const new_node = new Node(value)
        if(!this.head){
            this.head = new_node
            this.tail = new_node
        }
        else{
            let temp = this.head
            this.head = new_node
            this.head.next = temp
        }
        this.length++
        return this
    }
    
    shift(){
        if(!this.head){
            return undefined
        }
        if(this.head.next == null)
        {
            this.head = null
            this.tail = null
            this.length--
            return this.head
        }
        let temp = this.head
        this.head = this.head.next
        temp.next = null
        this.length--
        return temp
    }
    
    get(index){
        if(!this.head){
            return undefined
        }
        if(index < 0 || index > this.length){
            return undefined
        }
        let i = 0
        let temp = this.head
        while(i < index){
            temp = temp.next
            i++
        }
        return temp
    }
    
    set(index, value){
        let temp = this.get(index)
        if(temp)
        {
            temp.value = value
            return true
        }
        return false
    }
    
    insert(index, value){
        if(index == 0){
            return this.unshift(value)
        }
        if(index == this.length){
            return this.push(value)
        }
        let temp = this.get(index - 1)
        if(temp)
        {
            const new_node = new Node(value)
            new_node.next = temp.next
            temp.next = new_node
            this.length++
            return this
        }
    }
    
    remove(index){
        if(index == 0){
            return this.shift()
        }
        if(index == this.length-1){
            return this.pop()
        }
        let prev = this.get(index - 1)
        let temp = prev.next
        if(temp && prev)
        {
            prev.next = temp.next
            temp.next = null
            this.length--
            return this
        }
    }
    
    reverse(){
        let curr = this.head
        this.head = this.tail
        this.tail = curr
        let prev = null
        let next = curr.next
        while(next){
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
        }
        return this
    }
}

let ll = new LinkedList(7);
ll.push(4)
ll.push(5)
ll.push(7)
ll.push(8)
ll.pop()
ll.unshift(1)
ll.shift()
console.log(ll.get(10))
ll.set(0, 2)
ll.insert(1, 9)
ll.remove(1)
ll.reverse()
console.log(ll)
